
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f4  00007000  00007000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000c3  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002c6  00000000  00000000  0000034b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001b2  00000000  00000000  00000611  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000308  00000000  00000000  000007c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017d  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000065  00000000  00000000  00000cd9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7008:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    700c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7010:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7014:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7018:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    701c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7020:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7024:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7028:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    702c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7030:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7034:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7038:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    703c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7040:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7044:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7048:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    704c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7050:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7054:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7058:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    705c:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7060:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>
    7064:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61
    7074:	0e 94 40 38 	call	0x7080	; 0x7080 <main>
    7078:	0c 94 f8 38 	jmp	0x71f0	; 0x71f0 <_exit>

0000707c <__bad_interrupt>:
    707c:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007080 <main>:
#include "boot.h"


int main(void){

  UART_Init(9600);
    7080:	60 e8       	ldi	r22, 0x80	; 128
    7082:	75 e2       	ldi	r23, 0x25	; 37
    7084:	80 e0       	ldi	r24, 0x00	; 0
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	0e 94 87 38 	call	0x710e	; 0x710e <UART_Init>
  UART_Transmit_Byte(0x38);
    708c:	88 e3       	ldi	r24, 0x38	; 56
    708e:	0e 94 cf 38 	call	0x719e	; 0x719e <UART_Transmit_Byte>
    7092:	80 ed       	ldi	r24, 0xD0	; 208
    7094:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7096:	2c e2       	ldi	r18, 0x2C	; 44
    7098:	31 e0       	ldi	r19, 0x01	; 1
    709a:	f9 01       	movw	r30, r18
    709c:	31 97       	sbiw	r30, 0x01	; 1
    709e:	f1 f7       	brne	.-4      	; 0x709c <main+0x1c>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70a2:	d9 f7       	brne	.-10     	; 0x709a <main+0x1a>
    70a4:	80 ed       	ldi	r24, 0xD0	; 208
    70a6:	97 e0       	ldi	r25, 0x07	; 7
    70a8:	f8 cf       	rjmp	.-16     	; 0x709a <main+0x1a>

000070aa <UART_Clear_Registers>:
#define  UART_ENABLE_TX
#define  UART_ENABLE_RX
#define  UART_ENABLE_RX_INT

void UART_Clear_Registers(void){
  UCSR0A = 0;
    70aa:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = 0;
    70ae:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0C = 0;
    70b2:	10 92 c2 00 	sts	0x00C2, r1
  UBRR0H = 0;
    70b6:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 0;
    70ba:	10 92 c4 00 	sts	0x00C4, r1
}
    70be:	08 95       	ret

000070c0 <UART_Config_Transmitter>:

void UART_Config_Transmitter(void){
  UCSR0B|= (1<<TXEN0);
    70c0:	80 91 c1 00 	lds	r24, 0x00C1
    70c4:	88 60       	ori	r24, 0x08	; 8
    70c6:	80 93 c1 00 	sts	0x00C1, r24
  if((UCSR0C & 0x06) != 0x06){
    70ca:	80 91 c2 00 	lds	r24, 0x00C2
    70ce:	86 70       	andi	r24, 0x06	; 6
    70d0:	86 30       	cpi	r24, 0x06	; 6
    70d2:	29 f0       	breq	.+10     	; 0x70de <UART_Config_Transmitter+0x1e>
    UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
    70d4:	80 91 c2 00 	lds	r24, 0x00C2
    70d8:	86 60       	ori	r24, 0x06	; 6
    70da:	80 93 c2 00 	sts	0x00C2, r24
    70de:	08 95       	ret

000070e0 <UART_Config_Receiver>:
  }
}

void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    70e0:	80 91 c1 00 	lds	r24, 0x00C1
    70e4:	80 61       	ori	r24, 0x10	; 16
    70e6:	80 93 c1 00 	sts	0x00C1, r24
  if((UCSR0C & 0x06) != 0x06){
    70ea:	80 91 c2 00 	lds	r24, 0x00C2
    70ee:	86 70       	andi	r24, 0x06	; 6
    70f0:	86 30       	cpi	r24, 0x06	; 6
    70f2:	29 f0       	breq	.+10     	; 0x70fe <UART_Config_Receiver+0x1e>
    UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
    70f4:	80 91 c2 00 	lds	r24, 0x00C2
    70f8:	86 60       	ori	r24, 0x06	; 6
    70fa:	80 93 c2 00 	sts	0x00C2, r24
    70fe:	08 95       	ret

00007100 <UART_Config_Receiver_Interrupt>:
  }
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    7100:	e1 ec       	ldi	r30, 0xC1	; 193
    7102:	f0 e0       	ldi	r31, 0x00	; 0
    7104:	80 81       	ld	r24, Z
    7106:	80 68       	ori	r24, 0x80	; 128
    7108:	80 83       	st	Z, r24
  sei();
    710a:	78 94       	sei
}
    710c:	08 95       	ret

0000710e <UART_Init>:

void UART_Init(uint32_t BAUD){
    710e:	af 92       	push	r10
    7110:	bf 92       	push	r11
    7112:	cf 92       	push	r12
    7114:	df 92       	push	r13
    7116:	ef 92       	push	r14
    7118:	ff 92       	push	r15
    711a:	0f 93       	push	r16
    711c:	1f 93       	push	r17
    711e:	9b 01       	movw	r18, r22
    7120:	ac 01       	movw	r20, r24
  cli();
    7122:	f8 94       	cli
#define  UART_ENABLE_TX
#define  UART_ENABLE_RX
#define  UART_ENABLE_RX_INT

void UART_Clear_Registers(void){
  UCSR0A = 0;
    7124:	00 ec       	ldi	r16, 0xC0	; 192
    7126:	10 e0       	ldi	r17, 0x00	; 0
    7128:	f8 01       	movw	r30, r16
    712a:	10 82       	st	Z, r1
  UCSR0B = 0;
    712c:	71 ec       	ldi	r23, 0xC1	; 193
    712e:	e7 2e       	mov	r14, r23
    7130:	f1 2c       	mov	r15, r1
    7132:	f7 01       	movw	r30, r14
    7134:	10 82       	st	Z, r1
  UCSR0C = 0;
    7136:	10 92 c2 00 	sts	0x00C2, r1
  UBRR0H = 0;
    713a:	65 ec       	ldi	r22, 0xC5	; 197
    713c:	a6 2e       	mov	r10, r22
    713e:	b1 2c       	mov	r11, r1
    7140:	f5 01       	movw	r30, r10
    7142:	10 82       	st	Z, r1
  UBRR0L = 0;
    7144:	94 ec       	ldi	r25, 0xC4	; 196
    7146:	c9 2e       	mov	r12, r25
    7148:	d1 2c       	mov	r13, r1
    714a:	f6 01       	movw	r30, r12
    714c:	10 82       	st	Z, r1
void UART_Init(uint32_t BAUD){
  cli();
  UART_Clear_Registers();
  
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/BAUD)-1 ;
    714e:	60 e6       	ldi	r22, 0x60	; 96
    7150:	73 ee       	ldi	r23, 0xE3	; 227
    7152:	86 e1       	ldi	r24, 0x16	; 22
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	0e 94 d6 38 	call	0x71ac	; 0x71ac <__udivmodsi4>
    715a:	21 50       	subi	r18, 0x01	; 1
    715c:	30 40       	sbci	r19, 0x00	; 0
    715e:	40 40       	sbci	r20, 0x00	; 0
    7160:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    7162:	f8 01       	movw	r30, r16
    7164:	80 81       	ld	r24, Z
    7166:	82 60       	ori	r24, 0x02	; 2
    7168:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/BAUD)-1 ;
  #endif
  
  UBRR0H = (uint8_t)((UBRR_VAL >> 8) & 0xFF);
    716a:	bb 27       	eor	r27, r27
    716c:	a5 2f       	mov	r26, r21
    716e:	94 2f       	mov	r25, r20
    7170:	83 2f       	mov	r24, r19
    7172:	f5 01       	movw	r30, r10
    7174:	80 83       	st	Z, r24
  UBRR0L = (uint8_t)(UBRR_VAL & 0xFF) ;
    7176:	f6 01       	movw	r30, r12
    7178:	20 83       	st	Z, r18
  
  #ifdef UART_ENABLE_TX
    UART_Config_Transmitter();
    717a:	0e 94 60 38 	call	0x70c0	; 0x70c0 <UART_Config_Transmitter>
  #endif
  
  #ifdef UART_ENABLE_RX
    UART_Config_Receiver();
    717e:	0e 94 70 38 	call	0x70e0	; 0x70e0 <UART_Config_Receiver>
    UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
  }
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    7182:	f7 01       	movw	r30, r14
    7184:	80 81       	ld	r24, Z
    7186:	80 68       	ori	r24, 0x80	; 128
    7188:	80 83       	st	Z, r24
  sei();
    718a:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
    UART_Config_Receiver_Interrupt();
  #endif
}
    718c:	1f 91       	pop	r17
    718e:	0f 91       	pop	r16
    7190:	ff 90       	pop	r15
    7192:	ef 90       	pop	r14
    7194:	df 90       	pop	r13
    7196:	cf 90       	pop	r12
    7198:	bf 90       	pop	r11
    719a:	af 90       	pop	r10
    719c:	08 95       	ret

0000719e <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
  UDR0=val;
    719e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
    71a2:	80 91 c0 00 	lds	r24, 0x00C0
    71a6:	85 ff       	sbrs	r24, 5
    71a8:	fc cf       	rjmp	.-8      	; 0x71a2 <UART_Transmit_Byte+0x4>
    71aa:	08 95       	ret

000071ac <__udivmodsi4>:
    71ac:	a1 e2       	ldi	r26, 0x21	; 33
    71ae:	1a 2e       	mov	r1, r26
    71b0:	aa 1b       	sub	r26, r26
    71b2:	bb 1b       	sub	r27, r27
    71b4:	fd 01       	movw	r30, r26
    71b6:	0d c0       	rjmp	.+26     	; 0x71d2 <__udivmodsi4_ep>

000071b8 <__udivmodsi4_loop>:
    71b8:	aa 1f       	adc	r26, r26
    71ba:	bb 1f       	adc	r27, r27
    71bc:	ee 1f       	adc	r30, r30
    71be:	ff 1f       	adc	r31, r31
    71c0:	a2 17       	cp	r26, r18
    71c2:	b3 07       	cpc	r27, r19
    71c4:	e4 07       	cpc	r30, r20
    71c6:	f5 07       	cpc	r31, r21
    71c8:	20 f0       	brcs	.+8      	; 0x71d2 <__udivmodsi4_ep>
    71ca:	a2 1b       	sub	r26, r18
    71cc:	b3 0b       	sbc	r27, r19
    71ce:	e4 0b       	sbc	r30, r20
    71d0:	f5 0b       	sbc	r31, r21

000071d2 <__udivmodsi4_ep>:
    71d2:	66 1f       	adc	r22, r22
    71d4:	77 1f       	adc	r23, r23
    71d6:	88 1f       	adc	r24, r24
    71d8:	99 1f       	adc	r25, r25
    71da:	1a 94       	dec	r1
    71dc:	69 f7       	brne	.-38     	; 0x71b8 <__udivmodsi4_loop>
    71de:	60 95       	com	r22
    71e0:	70 95       	com	r23
    71e2:	80 95       	com	r24
    71e4:	90 95       	com	r25
    71e6:	9b 01       	movw	r18, r22
    71e8:	ac 01       	movw	r20, r24
    71ea:	bd 01       	movw	r22, r26
    71ec:	cf 01       	movw	r24, r30
    71ee:	08 95       	ret

000071f0 <_exit>:
    71f0:	f8 94       	cli

000071f2 <__stop_program>:
    71f2:	ff cf       	rjmp	.-2      	; 0x71f2 <__stop_program>
