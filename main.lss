
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000c3  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000002d2  00000000  00000000  0000031f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000001ae  00000000  00000000  000005f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000305  00000000  00000000  0000079f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000017d  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000097  00000000  00000000  00000cb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000d48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>
#include "uart.h"
#include "boot.h"


int main(void){
  80:	cf 93       	push	r28
  82:	df 93       	push	r29

  UART_Init(9600);
  84:	60 e8       	ldi	r22, 0x80	; 128
  86:	75 e2       	ldi	r23, 0x25	; 37
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	0e 94 7f 00 	call	0xfe	; 0xfe <UART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  90:	cc e2       	ldi	r28, 0x2C	; 44
  92:	d1 e0       	ldi	r29, 0x01	; 1
  
  while(1){
	
	UART_Transmit_Byte(0x38);
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	0e 94 b9 00 	call	0x172	; 0x172 <UART_Transmit_Byte>
  9a:	80 ed       	ldi	r24, 0xD0	; 208
  9c:	97 e0       	ldi	r25, 0x07	; 7
  9e:	fe 01       	movw	r30, r28
  a0:	31 97       	sbiw	r30, 0x01	; 1
  a2:	f1 f7       	brne	.-4      	; 0xa0 <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a6:	d9 f7       	brne	.-10     	; 0x9e <main+0x1e>
  a8:	f5 cf       	rjmp	.-22     	; 0x94 <main+0x14>

000000aa <UART_Clear_Registers>:
#define  UART_ENABLE_TX
#define  UART_ENABLE_RX
#define  UART_ENABLE_RX_INT

void UART_Clear_Registers(void){
  UCSR0A = 0;
  aa:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = 0;
  ae:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0C = 0;
  b2:	10 92 c2 00 	sts	0x00C2, r1
  UBRR0H = 0;
  b6:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 0;
  ba:	10 92 c4 00 	sts	0x00C4, r1
  UDR0   = 0;
  be:	10 92 c6 00 	sts	0x00C6, r1
}
  c2:	08 95       	ret

000000c4 <UART_Config_Transmitter>:

void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
  c4:	e1 ec       	ldi	r30, 0xC1	; 193
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
  UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
  ce:	e2 ec       	ldi	r30, 0xC2	; 194
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	86 60       	ori	r24, 0x06	; 6
  d6:	80 83       	st	Z, r24
}
  d8:	08 95       	ret

000000da <UART_Config_Receiver>:

void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
  da:	e1 ec       	ldi	r30, 0xC1	; 193
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	80 83       	st	Z, r24
  UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
  e4:	e2 ec       	ldi	r30, 0xC2	; 194
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	86 60       	ori	r24, 0x06	; 6
  ec:	80 83       	st	Z, r24
}
  ee:	08 95       	ret

000000f0 <UART_Config_Receiver_Interrupt>:

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
  f0:	e1 ec       	ldi	r30, 0xC1	; 193
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	80 68       	ori	r24, 0x80	; 128
  f8:	80 83       	st	Z, r24
  sei();
  fa:	78 94       	sei
}
  fc:	08 95       	ret

000000fe <UART_Init>:

void UART_Init(uint32_t BAUD){
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	7b 01       	movw	r14, r22
 108:	8c 01       	movw	r16, r24
  UART_Clear_Registers();
 10a:	0e 94 55 00 	call	0xaa	; 0xaa <UART_Clear_Registers>
  
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/BAUD)-1 ;
 10e:	60 e6       	ldi	r22, 0x60	; 96
 110:	73 ee       	ldi	r23, 0xE3	; 227
 112:	86 e1       	ldi	r24, 0x16	; 22
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	a8 01       	movw	r20, r16
 118:	97 01       	movw	r18, r14
 11a:	0e 94 c0 00 	call	0x180	; 0x180 <__udivmodsi4>
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	40 40       	sbci	r20, 0x00	; 0
 124:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
 126:	e0 ec       	ldi	r30, 0xC0	; 192
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 60       	ori	r24, 0x02	; 2
 12e:	80 83       	st	Z, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/BAUD)-1 ;
  #endif
  UBRR0H = (UBRR_VAL >> 8) & 0xFF;
 130:	bb 27       	eor	r27, r27
 132:	a5 2f       	mov	r26, r21
 134:	94 2f       	mov	r25, r20
 136:	83 2f       	mov	r24, r19
 138:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = UBRR_VAL & 0xFF ;
 13c:	20 93 c4 00 	sts	0x00C4, r18
  UBRR0L = 0;
  UDR0   = 0;
}

void UART_Config_Transmitter(void){
  UCSR0B|=(1<<TXEN0);
 140:	a1 ec       	ldi	r26, 0xC1	; 193
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	8c 91       	ld	r24, X
 146:	88 60       	ori	r24, 0x08	; 8
 148:	8c 93       	st	X, r24
  UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 14a:	e2 ec       	ldi	r30, 0xC2	; 194
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	86 60       	ori	r24, 0x06	; 6
 152:	80 83       	st	Z, r24
}

void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
 154:	8c 91       	ld	r24, X
 156:	80 61       	ori	r24, 0x10	; 16
 158:	8c 93       	st	X, r24
  UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
 15a:	80 81       	ld	r24, Z
 15c:	86 60       	ori	r24, 0x06	; 6
 15e:	80 83       	st	Z, r24
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
 160:	8c 91       	ld	r24, X
 162:	80 68       	ori	r24, 0x80	; 128
 164:	8c 93       	st	X, r24
  sei();
 166:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
    UART_Config_Receiver_Interrupt();
  #endif
}
 168:	1f 91       	pop	r17
 16a:	0f 91       	pop	r16
 16c:	ff 90       	pop	r15
 16e:	ef 90       	pop	r14
 170:	08 95       	ret

00000172 <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
  UDR0=val;
 172:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
 176:	80 91 c0 00 	lds	r24, 0x00C0
 17a:	85 ff       	sbrs	r24, 5
 17c:	fc cf       	rjmp	.-8      	; 0x176 <UART_Transmit_Byte+0x4>
 17e:	08 95       	ret

00000180 <__udivmodsi4>:
 180:	a1 e2       	ldi	r26, 0x21	; 33
 182:	1a 2e       	mov	r1, r26
 184:	aa 1b       	sub	r26, r26
 186:	bb 1b       	sub	r27, r27
 188:	fd 01       	movw	r30, r26
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <__udivmodsi4_ep>

0000018c <__udivmodsi4_loop>:
 18c:	aa 1f       	adc	r26, r26
 18e:	bb 1f       	adc	r27, r27
 190:	ee 1f       	adc	r30, r30
 192:	ff 1f       	adc	r31, r31
 194:	a2 17       	cp	r26, r18
 196:	b3 07       	cpc	r27, r19
 198:	e4 07       	cpc	r30, r20
 19a:	f5 07       	cpc	r31, r21
 19c:	20 f0       	brcs	.+8      	; 0x1a6 <__udivmodsi4_ep>
 19e:	a2 1b       	sub	r26, r18
 1a0:	b3 0b       	sbc	r27, r19
 1a2:	e4 0b       	sbc	r30, r20
 1a4:	f5 0b       	sbc	r31, r21

000001a6 <__udivmodsi4_ep>:
 1a6:	66 1f       	adc	r22, r22
 1a8:	77 1f       	adc	r23, r23
 1aa:	88 1f       	adc	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	1a 94       	dec	r1
 1b0:	69 f7       	brne	.-38     	; 0x18c <__udivmodsi4_loop>
 1b2:	60 95       	com	r22
 1b4:	70 95       	com	r23
 1b6:	80 95       	com	r24
 1b8:	90 95       	com	r25
 1ba:	9b 01       	movw	r18, r22
 1bc:	ac 01       	movw	r20, r24
 1be:	bd 01       	movw	r22, r26
 1c0:	cf 01       	movw	r24, r30
 1c2:	08 95       	ret

000001c4 <_exit>:
 1c4:	f8 94       	cli

000001c6 <__stop_program>:
 1c6:	ff cf       	rjmp	.-2      	; 0x1c6 <__stop_program>
