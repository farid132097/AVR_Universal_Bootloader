
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000041e  00007000  00007000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000001e5  00800100  00800100  00000492  2**0
                  ALLOC
  2 .debug_aranges 00000060  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000021c  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000007eb  00000000  00000000  0000070e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000488  00000000  00000000  00000ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000069c  00000000  00000000  00001381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000180  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002ae  00000000  00000000  00001ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001e5  00000000  00000000  00001e4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
    7000:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__ctors_end>
    7004:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7008:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    700c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7010:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7014:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7018:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    701c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7020:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7024:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7028:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    702c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7030:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7034:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7038:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    703c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7040:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7044:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7048:	0c 94 a1 38 	jmp	0x7142	; 0x7142 <__vector_18>
    704c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7050:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7054:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7058:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    705c:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7060:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>
    7064:	0c 94 46 38 	jmp	0x708c	; 0x708c <__bad_interrupt>

00007068 <__ctors_end>:
    7068:	11 24       	eor	r1, r1
    706a:	1f be       	out	0x3f, r1	; 63
    706c:	cf ef       	ldi	r28, 0xFF	; 255
    706e:	d8 e0       	ldi	r29, 0x08	; 8
    7070:	de bf       	out	0x3e, r29	; 62
    7072:	cd bf       	out	0x3d, r28	; 61

00007074 <__do_clear_bss>:
    7074:	12 e0       	ldi	r17, 0x02	; 2
    7076:	a0 e0       	ldi	r26, 0x00	; 0
    7078:	b1 e0       	ldi	r27, 0x01	; 1
    707a:	01 c0       	rjmp	.+2      	; 0x707e <.do_clear_bss_start>

0000707c <.do_clear_bss_loop>:
    707c:	1d 92       	st	X+, r1

0000707e <.do_clear_bss_start>:
    707e:	a5 3e       	cpi	r26, 0xE5	; 229
    7080:	b1 07       	cpc	r27, r17
    7082:	e1 f7       	brne	.-8      	; 0x707c <.do_clear_bss_loop>
    7084:	0e 94 48 38 	call	0x7090	; 0x7090 <main>
    7088:	0c 94 0d 3a 	jmp	0x741a	; 0x741a <_exit>

0000708c <__bad_interrupt>:
    708c:	0c 94 00 38 	jmp	0x7000	; 0x7000 <__vectors>

00007090 <main>:
#include "boot.h"


int main(void){

  Boot_Init();
    7090:	0e 94 c6 39 	call	0x738c	; 0x738c <Boot_Init>
    7094:	80 ed       	ldi	r24, 0xD0	; 208
    7096:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    7098:	2c e2       	ldi	r18, 0x2C	; 44
    709a:	31 e0       	ldi	r19, 0x01	; 1
    709c:	f9 01       	movw	r30, r18
    709e:	31 97       	sbiw	r30, 0x01	; 1
    70a0:	f1 f7       	brne	.-4      	; 0x709e <main+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    70a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    70a4:	d9 f7       	brne	.-10     	; 0x709c <main+0xc>
    70a6:	80 ed       	ldi	r24, 0xD0	; 208
    70a8:	97 e0       	ldi	r25, 0x07	; 7
    70aa:	f8 cf       	rjmp	.-16     	; 0x709c <main+0xc>

000070ac <UART_Struct_Init>:
  volatile uint16_t BufIndex;
}uart_t;

uart_t UART;

void UART_Struct_Init(void){
    70ac:	80 e0       	ldi	r24, 0x00	; 0
    70ae:	90 e0       	ldi	r25, 0x00	; 0
  #ifdef UART_BUF_SIZE
  for(uint16_t i=0;i<UART_BUF_SIZE;i++){
    UART.Buf[i]=0;
    70b0:	fc 01       	movw	r30, r24
    70b2:	e0 50       	subi	r30, 0x00	; 0
    70b4:	ff 4f       	sbci	r31, 0xFF	; 255
    70b6:	10 82       	st	Z, r1

uart_t UART;

void UART_Struct_Init(void){
  #ifdef UART_BUF_SIZE
  for(uint16_t i=0;i<UART_BUF_SIZE;i++){
    70b8:	01 96       	adiw	r24, 0x01	; 1
    70ba:	88 3c       	cpi	r24, 0xC8	; 200
    70bc:	91 05       	cpc	r25, r1
    70be:	c1 f7       	brne	.-16     	; 0x70b0 <UART_Struct_Init+0x4>
  #else
  for(uint16_t i=0;i<140;i++){
    UART.Buf[i]=0;
  }
  #endif
  UART.BufIndex=0;
    70c0:	10 92 c9 01 	sts	0x01C9, r1
    70c4:	10 92 c8 01 	sts	0x01C8, r1
}
    70c8:	08 95       	ret

000070ca <UART_Clear_Registers>:

void UART_Clear_Registers(void){
  UCSR0A = 0;
    70ca:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = 0;
    70ce:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0C = 0;
    70d2:	10 92 c2 00 	sts	0x00C2, r1
  UBRR0H = 0;
    70d6:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 0;
    70da:	10 92 c4 00 	sts	0x00C4, r1
}
    70de:	08 95       	ret

000070e0 <UART_Config_Transmitter>:

void UART_Config_Transmitter(void){
  UCSR0B|= (1<<TXEN0);
    70e0:	80 91 c1 00 	lds	r24, 0x00C1
    70e4:	88 60       	ori	r24, 0x08	; 8
    70e6:	80 93 c1 00 	sts	0x00C1, r24
  if((UCSR0C & 0x06) != 0x06){
    70ea:	80 91 c2 00 	lds	r24, 0x00C2
    70ee:	86 70       	andi	r24, 0x06	; 6
    70f0:	86 30       	cpi	r24, 0x06	; 6
    70f2:	29 f0       	breq	.+10     	; 0x70fe <UART_Config_Transmitter+0x1e>
    UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
    70f4:	80 91 c2 00 	lds	r24, 0x00C2
    70f8:	86 60       	ori	r24, 0x06	; 6
    70fa:	80 93 c2 00 	sts	0x00C2, r24
    70fe:	08 95       	ret

00007100 <UART_Config_Receiver>:
  }
}

void UART_Config_Receiver(void){
  UCSR0B|=(1<<RXEN0);
    7100:	80 91 c1 00 	lds	r24, 0x00C1
    7104:	80 61       	ori	r24, 0x10	; 16
    7106:	80 93 c1 00 	sts	0x00C1, r24
  if((UCSR0C & 0x06) != 0x06){
    710a:	80 91 c2 00 	lds	r24, 0x00C2
    710e:	86 70       	andi	r24, 0x06	; 6
    7110:	86 30       	cpi	r24, 0x06	; 6
    7112:	29 f0       	breq	.+10     	; 0x711e <UART_Config_Receiver+0x1e>
    UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
    7114:	80 91 c2 00 	lds	r24, 0x00C2
    7118:	86 60       	ori	r24, 0x06	; 6
    711a:	80 93 c2 00 	sts	0x00C2, r24
    711e:	08 95       	ret

00007120 <UART_Config_Receiver_Interrupt>:
  }
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    7120:	e1 ec       	ldi	r30, 0xC1	; 193
    7122:	f0 e0       	ldi	r31, 0x00	; 0
    7124:	80 81       	ld	r24, Z
    7126:	80 68       	ori	r24, 0x80	; 128
    7128:	80 83       	st	Z, r24
  sei();
    712a:	78 94       	sei
}
    712c:	08 95       	ret

0000712e <UART_Transmit_Byte>:

void UART_Transmit_Byte(uint8_t val){
  UDR0=val;
    712e:	80 93 c6 00 	sts	0x00C6, r24
  while((UCSR0A & (1<<UDRE0))==0);
    7132:	80 91 c0 00 	lds	r24, 0x00C0
    7136:	85 ff       	sbrs	r24, 5
    7138:	fc cf       	rjmp	.-8      	; 0x7132 <UART_Transmit_Byte+0x4>
}
    713a:	08 95       	ret

0000713c <UART_Receive_Byte>:


uint8_t UART_Receive_Byte(void){
  return UDR0;
    713c:	80 91 c6 00 	lds	r24, 0x00C6
}
    7140:	08 95       	ret

00007142 <__vector_18>:


ISR(USART_RX_vect){
    7142:	1f 92       	push	r1
    7144:	0f 92       	push	r0
    7146:	0f b6       	in	r0, 0x3f	; 63
    7148:	0f 92       	push	r0
    714a:	11 24       	eor	r1, r1
    714c:	8f 93       	push	r24
    714e:	9f 93       	push	r25
    7150:	ef 93       	push	r30
    7152:	ff 93       	push	r31
  UART.Buf[UART.BufIndex] = UART_Receive_Byte();
    7154:	e0 91 c8 01 	lds	r30, 0x01C8
    7158:	f0 91 c9 01 	lds	r31, 0x01C9
  while((UCSR0A & (1<<UDRE0))==0);
}


uint8_t UART_Receive_Byte(void){
  return UDR0;
    715c:	80 91 c6 00 	lds	r24, 0x00C6
}


ISR(USART_RX_vect){
  UART.Buf[UART.BufIndex] = UART_Receive_Byte();
    7160:	e0 50       	subi	r30, 0x00	; 0
    7162:	ff 4f       	sbci	r31, 0xFF	; 255
    7164:	80 83       	st	Z, r24
  UART.BufIndex++;
    7166:	80 91 c8 01 	lds	r24, 0x01C8
    716a:	90 91 c9 01 	lds	r25, 0x01C9
    716e:	01 96       	adiw	r24, 0x01	; 1
    7170:	90 93 c9 01 	sts	0x01C9, r25
    7174:	80 93 c8 01 	sts	0x01C8, r24
  #ifdef UART_BUF_SIZE
  if(UART.BufIndex>=UART_BUF_SIZE){
    7178:	80 91 c8 01 	lds	r24, 0x01C8
    717c:	90 91 c9 01 	lds	r25, 0x01C9
    7180:	88 3c       	cpi	r24, 0xC8	; 200
    7182:	91 05       	cpc	r25, r1
    7184:	20 f0       	brcs	.+8      	; 0x718e <__vector_18+0x4c>
    UART.BufIndex=0;
    7186:	10 92 c9 01 	sts	0x01C9, r1
    718a:	10 92 c8 01 	sts	0x01C8, r1
  #else
  if(UART.BufIndex>=140){
    UART.BufIndex=0;
  }
  #endif
}
    718e:	ff 91       	pop	r31
    7190:	ef 91       	pop	r30
    7192:	9f 91       	pop	r25
    7194:	8f 91       	pop	r24
    7196:	0f 90       	pop	r0
    7198:	0f be       	out	0x3f, r0	; 63
    719a:	0f 90       	pop	r0
    719c:	1f 90       	pop	r1
    719e:	18 95       	reti

000071a0 <UART_Get_Buf_Index>:




uint16_t UART_Get_Buf_Index(void){
  return UART.BufIndex;
    71a0:	20 91 c8 01 	lds	r18, 0x01C8
    71a4:	30 91 c9 01 	lds	r19, 0x01C9
}
    71a8:	c9 01       	movw	r24, r18
    71aa:	08 95       	ret

000071ac <UART_Init>:


void UART_Init(uint32_t BAUD){
    71ac:	9b 01       	movw	r18, r22
    71ae:	ac 01       	movw	r20, r24
  cli();
    71b0:	f8 94       	cli
    71b2:	80 e0       	ldi	r24, 0x00	; 0
    71b4:	90 e0       	ldi	r25, 0x00	; 0
uart_t UART;

void UART_Struct_Init(void){
  #ifdef UART_BUF_SIZE
  for(uint16_t i=0;i<UART_BUF_SIZE;i++){
    UART.Buf[i]=0;
    71b6:	fc 01       	movw	r30, r24
    71b8:	e0 50       	subi	r30, 0x00	; 0
    71ba:	ff 4f       	sbci	r31, 0xFF	; 255
    71bc:	10 82       	st	Z, r1

uart_t UART;

void UART_Struct_Init(void){
  #ifdef UART_BUF_SIZE
  for(uint16_t i=0;i<UART_BUF_SIZE;i++){
    71be:	01 96       	adiw	r24, 0x01	; 1
    71c0:	88 3c       	cpi	r24, 0xC8	; 200
    71c2:	91 05       	cpc	r25, r1
    71c4:	c1 f7       	brne	.-16     	; 0x71b6 <UART_Init+0xa>
  #else
  for(uint16_t i=0;i<140;i++){
    UART.Buf[i]=0;
  }
  #endif
  UART.BufIndex=0;
    71c6:	10 92 c9 01 	sts	0x01C9, r1
    71ca:	10 92 c8 01 	sts	0x01C8, r1
}

void UART_Clear_Registers(void){
  UCSR0A = 0;
    71ce:	10 92 c0 00 	sts	0x00C0, r1
  UCSR0B = 0;
    71d2:	10 92 c1 00 	sts	0x00C1, r1
  UCSR0C = 0;
    71d6:	10 92 c2 00 	sts	0x00C2, r1
  UBRR0H = 0;
    71da:	10 92 c5 00 	sts	0x00C5, r1
  UBRR0L = 0;
    71de:	10 92 c4 00 	sts	0x00C4, r1
  cli();
  UART_Struct_Init();
  UART_Clear_Registers();
  
  #ifdef UART_DOUBLE_SPEED
  uint32_t UBRR_VAL = ((F_CPU/8)/BAUD)-1 ;
    71e2:	60 e6       	ldi	r22, 0x60	; 96
    71e4:	73 ee       	ldi	r23, 0xE3	; 227
    71e6:	86 e1       	ldi	r24, 0x16	; 22
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	0e 94 eb 39 	call	0x73d6	; 0x73d6 <__udivmodsi4>
    71ee:	21 50       	subi	r18, 0x01	; 1
    71f0:	30 40       	sbci	r19, 0x00	; 0
    71f2:	40 40       	sbci	r20, 0x00	; 0
    71f4:	50 40       	sbci	r21, 0x00	; 0
  UCSR0A|=(1<<U2X0);  
    71f6:	80 91 c0 00 	lds	r24, 0x00C0
    71fa:	82 60       	ori	r24, 0x02	; 2
    71fc:	80 93 c0 00 	sts	0x00C0, r24
  #else
  UCSR0A&=~(1<<U2X0);  
  uint32_t UBRR_VAL = ((F_CPU/16)/BAUD)-1 ;
  #endif
  
  UBRR0H = (uint8_t)((UBRR_VAL >> 8) & 0xFF);
    7200:	bb 27       	eor	r27, r27
    7202:	a5 2f       	mov	r26, r21
    7204:	94 2f       	mov	r25, r20
    7206:	83 2f       	mov	r24, r19
    7208:	80 93 c5 00 	sts	0x00C5, r24
  UBRR0L = (uint8_t)(UBRR_VAL & 0xFF) ;
    720c:	20 93 c4 00 	sts	0x00C4, r18
  
  #ifdef UART_ENABLE_TX
    UART_Config_Transmitter();
    7210:	0e 94 70 38 	call	0x70e0	; 0x70e0 <UART_Config_Transmitter>
  #endif
  
  #ifdef UART_ENABLE_RX
    UART_Config_Receiver();
    7214:	0e 94 80 38 	call	0x7100	; 0x7100 <UART_Config_Receiver>
    UCSR0C|=(1<<UCSZ00)|(1<<UCSZ01);
  }
}

void UART_Config_Receiver_Interrupt(void){
  UCSR0B|=(1<<RXCIE0);
    7218:	80 91 c1 00 	lds	r24, 0x00C1
    721c:	80 68       	ori	r24, 0x80	; 128
    721e:	80 93 c1 00 	sts	0x00C1, r24
  sei();
    7222:	78 94       	sei
  #endif
  
  #ifdef UART_ENABLE_RX_INT
    UART_Config_Receiver_Interrupt();
  #endif
    7224:	08 95       	ret

00007226 <Boot_Struct_init>:
}boot_t;

boot_t Boot;


void Boot_Struct_init(void){
    7226:	80 e0       	ldi	r24, 0x00	; 0
    7228:	90 e0       	ldi	r25, 0x00	; 0
  Boot.SubPageIndex=0;
}

void Boot_Flush_Buf(void){
  for(uint16_t i=0;i<BOOT_BUF_SIZE;i++){
    Boot.Buf[i]=0;
    722a:	fc 01       	movw	r30, r24
    722c:	e6 53       	subi	r30, 0x36	; 54
    722e:	fe 4f       	sbci	r31, 0xFE	; 254
    7230:	10 82       	st	Z, r1
  Boot.PageIndex=0;
  Boot.SubPageIndex=0;
}

void Boot_Flush_Buf(void){
  for(uint16_t i=0;i<BOOT_BUF_SIZE;i++){
    7232:	01 96       	adiw	r24, 0x01	; 1
    7234:	8c 38       	cpi	r24, 0x8C	; 140
    7236:	91 05       	cpc	r25, r1
    7238:	c1 f7       	brne	.-16     	; 0x722a <Boot_Struct_init+0x4>
    Boot.Buf[i]=0;
  }
  Boot.BufIndex=0;
    723a:	10 92 56 02 	sts	0x0256, r1
boot_t Boot;


void Boot_Struct_init(void){
  Boot_Flush_Buf();
  Boot.PageIndex=0;
    723e:	10 92 57 02 	sts	0x0257, r1
  Boot.SubPageIndex=0;
    7242:	10 92 58 02 	sts	0x0258, r1
}
    7246:	08 95       	ret

00007248 <Boot_Flush_Buf>:

void Boot_Flush_Buf(void){
    7248:	80 e0       	ldi	r24, 0x00	; 0
    724a:	90 e0       	ldi	r25, 0x00	; 0
  for(uint16_t i=0;i<BOOT_BUF_SIZE;i++){
    Boot.Buf[i]=0;
    724c:	fc 01       	movw	r30, r24
    724e:	e6 53       	subi	r30, 0x36	; 54
    7250:	fe 4f       	sbci	r31, 0xFE	; 254
    7252:	10 82       	st	Z, r1
  Boot.PageIndex=0;
  Boot.SubPageIndex=0;
}

void Boot_Flush_Buf(void){
  for(uint16_t i=0;i<BOOT_BUF_SIZE;i++){
    7254:	01 96       	adiw	r24, 0x01	; 1
    7256:	8c 38       	cpi	r24, 0x8C	; 140
    7258:	91 05       	cpc	r25, r1
    725a:	c1 f7       	brne	.-16     	; 0x724c <Boot_Flush_Buf+0x4>
    Boot.Buf[i]=0;
  }
  Boot.BufIndex=0;
    725c:	10 92 56 02 	sts	0x0256, r1
}
    7260:	08 95       	ret

00007262 <Boot_RVT_Bootloader>:


void Boot_RVT_Bootloader(void){
  if((MCUCR & (1<<IVCE))==0){
    7262:	05 b6       	in	r0, 0x35	; 53
    7264:	00 fc       	sbrc	r0, 0
    7266:	04 c0       	rjmp	.+8      	; 0x7270 <Boot_RVT_Bootloader+0xe>
    MCUCR = (1<<IVCE);
    7268:	81 e0       	ldi	r24, 0x01	; 1
    726a:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    726c:	82 e0       	ldi	r24, 0x02	; 2
    726e:	85 bf       	out	0x35, r24	; 53
    7270:	08 95       	ret

00007272 <Boot_RVT_App>:
  }
}

void Boot_RVT_App(void){
  if(MCUCR & (1<<IVCE)){
    7272:	05 b6       	in	r0, 0x35	; 53
    7274:	00 fe       	sbrs	r0, 0
    7276:	03 c0       	rjmp	.+6      	; 0x727e <Boot_RVT_App+0xc>
    MCUCR = (1<<IVCE);
    7278:	81 e0       	ldi	r24, 0x01	; 1
    727a:	85 bf       	out	0x35, r24	; 53
    MCUCR = 0;
    727c:	15 be       	out	0x35, r1	; 53
    727e:	08 95       	ret

00007280 <Boot_CRC16>:
  }
}

uint16_t Boot_CRC16(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
    7280:	36 2f       	mov	r19, r22
    7282:	20 e0       	ldi	r18, 0x00	; 0
    7284:	28 27       	eor	r18, r24
    7286:	39 27       	eor	r19, r25
    7288:	40 e0       	ldi	r20, 0x00	; 0
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
	  crc=(crc<<1)^0x1021;
    728a:	61 e2       	ldi	r22, 0x21	; 33
    728c:	70 e1       	ldi	r23, 0x10	; 16
    728e:	c9 01       	movw	r24, r18
    7290:	88 0f       	add	r24, r24
    7292:	99 1f       	adc	r25, r25
}

uint16_t Boot_CRC16(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
    if(crc & 0x8000){
    7294:	37 ff       	sbrs	r19, 7
    7296:	04 c0       	rjmp	.+8      	; 0x72a0 <Boot_CRC16+0x20>
	  crc=(crc<<1)^0x1021;
    7298:	9c 01       	movw	r18, r24
    729a:	26 27       	eor	r18, r22
    729c:	37 27       	eor	r19, r23
    729e:	01 c0       	rjmp	.+2      	; 0x72a2 <Boot_CRC16+0x22>
	}
    else{
	  crc<<=1;
    72a0:	9c 01       	movw	r18, r24
  }
}

uint16_t Boot_CRC16(uint16_t crc, uint8_t data){
  crc=crc^((uint16_t)data<<8);
  for(uint8_t i=0;i<8;i++){
    72a2:	4f 5f       	subi	r20, 0xFF	; 255
    72a4:	48 30       	cpi	r20, 0x08	; 8
    72a6:	99 f7       	brne	.-26     	; 0x728e <Boot_CRC16+0xe>
    else{
	  crc<<=1;
	}
  }
  return crc;
}
    72a8:	c9 01       	movw	r24, r18
    72aa:	08 95       	ret

000072ac <Boot_CRC16_Block>:

uint16_t Boot_CRC16_Block(uint8_t *buf, uint8_t len){
    72ac:	0f 93       	push	r16
    72ae:	1f 93       	push	r17
    72b0:	cf 93       	push	r28
    72b2:	df 93       	push	r29
    72b4:	06 2f       	mov	r16, r22
    72b6:	ec 01       	movw	r28, r24
    72b8:	20 e0       	ldi	r18, 0x00	; 0
    72ba:	30 e0       	ldi	r19, 0x00	; 0
    72bc:	10 e0       	ldi	r17, 0x00	; 0
    72be:	06 c0       	rjmp	.+12     	; 0x72cc <Boot_CRC16_Block+0x20>
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
    crc=Boot_CRC16(crc,buf[i]);
    72c0:	c9 01       	movw	r24, r18
    72c2:	69 91       	ld	r22, Y+
    72c4:	0e 94 40 39 	call	0x7280	; 0x7280 <Boot_CRC16>
    72c8:	9c 01       	movw	r18, r24
  return crc;
}

uint16_t Boot_CRC16_Block(uint8_t *buf, uint8_t len){
  uint16_t crc=0;
  for(uint8_t i=0;i<len;i++){
    72ca:	1f 5f       	subi	r17, 0xFF	; 255
    72cc:	10 17       	cp	r17, r16
    72ce:	c0 f3       	brcs	.-16     	; 0x72c0 <Boot_CRC16_Block+0x14>
    crc=Boot_CRC16(crc,buf[i]);
  }
  return crc;
}
    72d0:	c9 01       	movw	r24, r18
    72d2:	df 91       	pop	r29
    72d4:	cf 91       	pop	r28
    72d6:	1f 91       	pop	r17
    72d8:	0f 91       	pop	r16
    72da:	08 95       	ret

000072dc <Boot_Config_Add_Field>:

void Boot_Config_Add_Field(uint32_t val, uint8_t len){
    72dc:	24 2f       	mov	r18, r20
    72de:	0e c0       	rjmp	.+28     	; 0x72fc <Boot_Config_Add_Field+0x20>
  for(uint8_t i=len;i>0;i--){
    Boot.Buf[Boot.BufIndex+i-1]= val & 0xFF;
    72e0:	e0 91 56 02 	lds	r30, 0x0256
    72e4:	f0 e0       	ldi	r31, 0x00	; 0
    72e6:	31 97       	sbiw	r30, 0x01	; 1
    72e8:	e2 0f       	add	r30, r18
    72ea:	f1 1d       	adc	r31, r1
    72ec:	e6 53       	subi	r30, 0x36	; 54
    72ee:	fe 4f       	sbci	r31, 0xFE	; 254
    72f0:	60 83       	st	Z, r22
	val>>=8;
    72f2:	67 2f       	mov	r22, r23
    72f4:	78 2f       	mov	r23, r24
    72f6:	89 2f       	mov	r24, r25
    72f8:	99 27       	eor	r25, r25
  }
  return crc;
}

void Boot_Config_Add_Field(uint32_t val, uint8_t len){
  for(uint8_t i=len;i>0;i--){
    72fa:	21 50       	subi	r18, 0x01	; 1
    72fc:	22 23       	and	r18, r18
    72fe:	81 f7       	brne	.-32     	; 0x72e0 <Boot_Config_Add_Field+0x4>
    Boot.Buf[Boot.BufIndex+i-1]= val & 0xFF;
	val>>=8;
  }
  Boot.BufIndex+=len;
    7300:	80 91 56 02 	lds	r24, 0x0256
    7304:	84 0f       	add	r24, r20
    7306:	80 93 56 02 	sts	0x0256, r24
}
    730a:	08 95       	ret

0000730c <Boot_Build_Config_Packet>:

void Boot_Build_Config_Packet(void){
    730c:	80 e0       	ldi	r24, 0x00	; 0
    730e:	90 e0       	ldi	r25, 0x00	; 0
  Boot.SubPageIndex=0;
}

void Boot_Flush_Buf(void){
  for(uint16_t i=0;i<BOOT_BUF_SIZE;i++){
    Boot.Buf[i]=0;
    7310:	fc 01       	movw	r30, r24
    7312:	e6 53       	subi	r30, 0x36	; 54
    7314:	fe 4f       	sbci	r31, 0xFE	; 254
    7316:	10 82       	st	Z, r1
  Boot.PageIndex=0;
  Boot.SubPageIndex=0;
}

void Boot_Flush_Buf(void){
  for(uint16_t i=0;i<BOOT_BUF_SIZE;i++){
    7318:	01 96       	adiw	r24, 0x01	; 1
    731a:	8c 38       	cpi	r24, 0x8C	; 140
    731c:	91 05       	cpc	r25, r1
    731e:	c1 f7       	brne	.-16     	; 0x7310 <Boot_Build_Config_Packet+0x4>
    Boot.Buf[i]=0;
  }
  Boot.BufIndex=0;
    7320:	10 92 56 02 	sts	0x0256, r1
  Boot.BufIndex+=len;
}

void Boot_Build_Config_Packet(void){
  Boot_Flush_Buf();
  Boot_Config_Add_Field(BOOT_SYNC_BYTE,2);
    7324:	6a ea       	ldi	r22, 0xAA	; 170
    7326:	75 e5       	ldi	r23, 0x55	; 85
    7328:	80 e0       	ldi	r24, 0x00	; 0
    732a:	90 e0       	ldi	r25, 0x00	; 0
    732c:	42 e0       	ldi	r20, 0x02	; 2
    732e:	0e 94 6e 39 	call	0x72dc	; 0x72dc <Boot_Config_Add_Field>
  Boot_Config_Add_Field(BOOT_DEV_SIG,  4);
    7332:	6f e0       	ldi	r22, 0x0F	; 15
    7334:	75 e9       	ldi	r23, 0x95	; 149
    7336:	8e e1       	ldi	r24, 0x1E	; 30
    7338:	90 e0       	ldi	r25, 0x00	; 0
    733a:	44 e0       	ldi	r20, 0x04	; 4
    733c:	0e 94 6e 39 	call	0x72dc	; 0x72dc <Boot_Config_Add_Field>
  Boot_Config_Add_Field(BOOT_BAUD_RATE,4);
    7340:	60 e0       	ldi	r22, 0x00	; 0
    7342:	76 e9       	ldi	r23, 0x96	; 150
    7344:	80 e0       	ldi	r24, 0x00	; 0
    7346:	90 e0       	ldi	r25, 0x00	; 0
    7348:	44 e0       	ldi	r20, 0x04	; 4
    734a:	0e 94 6e 39 	call	0x72dc	; 0x72dc <Boot_Config_Add_Field>
  uint16_t temp = Boot_CRC16_Block(Boot.Buf, Boot.BufIndex);
    734e:	60 91 56 02 	lds	r22, 0x0256
    7352:	8a ec       	ldi	r24, 0xCA	; 202
    7354:	91 e0       	ldi	r25, 0x01	; 1
    7356:	0e 94 56 39 	call	0x72ac	; 0x72ac <Boot_CRC16_Block>
  Boot_Config_Add_Field(temp,2);
    735a:	a0 e0       	ldi	r26, 0x00	; 0
    735c:	b0 e0       	ldi	r27, 0x00	; 0
    735e:	bc 01       	movw	r22, r24
    7360:	cd 01       	movw	r24, r26
    7362:	42 e0       	ldi	r20, 0x02	; 2
    7364:	0e 94 6e 39 	call	0x72dc	; 0x72dc <Boot_Config_Add_Field>
}
    7368:	08 95       	ret

0000736a <Boot_Send_Config_Packet>:

void Boot_Send_Config_Packet(void){
    736a:	1f 93       	push	r17
    736c:	10 e0       	ldi	r17, 0x00	; 0
    736e:	08 c0       	rjmp	.+16     	; 0x7380 <Boot_Send_Config_Packet+0x16>
  for(uint8_t i=0;i<Boot.BufIndex;i++){
    UART_Transmit_Byte(Boot.Buf[i]);
    7370:	e1 2f       	mov	r30, r17
    7372:	f0 e0       	ldi	r31, 0x00	; 0
    7374:	e6 53       	subi	r30, 0x36	; 54
    7376:	fe 4f       	sbci	r31, 0xFE	; 254
    7378:	80 81       	ld	r24, Z
    737a:	0e 94 97 38 	call	0x712e	; 0x712e <UART_Transmit_Byte>
  uint16_t temp = Boot_CRC16_Block(Boot.Buf, Boot.BufIndex);
  Boot_Config_Add_Field(temp,2);
}

void Boot_Send_Config_Packet(void){
  for(uint8_t i=0;i<Boot.BufIndex;i++){
    737e:	1f 5f       	subi	r17, 0xFF	; 255
    7380:	80 91 56 02 	lds	r24, 0x0256
    7384:	18 17       	cp	r17, r24
    7386:	a0 f3       	brcs	.-24     	; 0x7370 <Boot_Send_Config_Packet+0x6>
    UART_Transmit_Byte(Boot.Buf[i]);
  }
}
    7388:	1f 91       	pop	r17
    738a:	08 95       	ret

0000738c <Boot_Init>:
  Boot.BufIndex=0;
}


void Boot_RVT_Bootloader(void){
  if((MCUCR & (1<<IVCE))==0){
    738c:	05 b6       	in	r0, 0x35	; 53
    738e:	00 fc       	sbrc	r0, 0
    7390:	04 c0       	rjmp	.+8      	; 0x739a <Boot_Init+0xe>
    MCUCR = (1<<IVCE);
    7392:	81 e0       	ldi	r24, 0x01	; 1
    7394:	85 bf       	out	0x35, r24	; 53
    MCUCR = (1<<IVSEL);
    7396:	82 e0       	ldi	r24, 0x02	; 2
    7398:	85 bf       	out	0x35, r24	; 53
}


void Boot_Init(void){
  Boot_RVT_Bootloader();
  Boot_Build_Config_Packet();
    739a:	0e 94 86 39 	call	0x730c	; 0x730c <Boot_Build_Config_Packet>
  UART_Init(9600);
    739e:	60 e8       	ldi	r22, 0x80	; 128
    73a0:	75 e2       	ldi	r23, 0x25	; 37
    73a2:	80 e0       	ldi	r24, 0x00	; 0
    73a4:	90 e0       	ldi	r25, 0x00	; 0
    73a6:	0e 94 d6 38 	call	0x71ac	; 0x71ac <UART_Init>
  Boot_Send_Config_Packet();
    73aa:	0e 94 b5 39 	call	0x736a	; 0x736a <Boot_Send_Config_Packet>
    73ae:	88 e9       	ldi	r24, 0x98	; 152
    73b0:	9a e3       	ldi	r25, 0x3A	; 58
    73b2:	01 97       	sbiw	r24, 0x01	; 1
    73b4:	f1 f7       	brne	.-4      	; 0x73b2 <Boot_Init+0x26>
  _delay_ms(5);
  UART_Init(BOOT_BAUD_RATE);
    73b6:	60 e0       	ldi	r22, 0x00	; 0
    73b8:	76 e9       	ldi	r23, 0x96	; 150
    73ba:	80 e0       	ldi	r24, 0x00	; 0
    73bc:	90 e0       	ldi	r25, 0x00	; 0
    73be:	0e 94 d6 38 	call	0x71ac	; 0x71ac <UART_Init>
    73c2:	8c e2       	ldi	r24, 0x2C	; 44
    73c4:	91 e0       	ldi	r25, 0x01	; 1
    73c6:	2c e2       	ldi	r18, 0x2C	; 44
    73c8:	31 e0       	ldi	r19, 0x01	; 1
    73ca:	f9 01       	movw	r30, r18
    73cc:	31 97       	sbiw	r30, 0x01	; 1
    73ce:	f1 f7       	brne	.-4      	; 0x73cc <Boot_Init+0x40>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    73d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    73d2:	d9 f7       	brne	.-10     	; 0x73ca <Boot_Init+0x3e>
  _delay_ms(30);
    73d4:	08 95       	ret

000073d6 <__udivmodsi4>:
    73d6:	a1 e2       	ldi	r26, 0x21	; 33
    73d8:	1a 2e       	mov	r1, r26
    73da:	aa 1b       	sub	r26, r26
    73dc:	bb 1b       	sub	r27, r27
    73de:	fd 01       	movw	r30, r26
    73e0:	0d c0       	rjmp	.+26     	; 0x73fc <__udivmodsi4_ep>

000073e2 <__udivmodsi4_loop>:
    73e2:	aa 1f       	adc	r26, r26
    73e4:	bb 1f       	adc	r27, r27
    73e6:	ee 1f       	adc	r30, r30
    73e8:	ff 1f       	adc	r31, r31
    73ea:	a2 17       	cp	r26, r18
    73ec:	b3 07       	cpc	r27, r19
    73ee:	e4 07       	cpc	r30, r20
    73f0:	f5 07       	cpc	r31, r21
    73f2:	20 f0       	brcs	.+8      	; 0x73fc <__udivmodsi4_ep>
    73f4:	a2 1b       	sub	r26, r18
    73f6:	b3 0b       	sbc	r27, r19
    73f8:	e4 0b       	sbc	r30, r20
    73fa:	f5 0b       	sbc	r31, r21

000073fc <__udivmodsi4_ep>:
    73fc:	66 1f       	adc	r22, r22
    73fe:	77 1f       	adc	r23, r23
    7400:	88 1f       	adc	r24, r24
    7402:	99 1f       	adc	r25, r25
    7404:	1a 94       	dec	r1
    7406:	69 f7       	brne	.-38     	; 0x73e2 <__udivmodsi4_loop>
    7408:	60 95       	com	r22
    740a:	70 95       	com	r23
    740c:	80 95       	com	r24
    740e:	90 95       	com	r25
    7410:	9b 01       	movw	r18, r22
    7412:	ac 01       	movw	r20, r24
    7414:	bd 01       	movw	r22, r26
    7416:	cf 01       	movw	r24, r30
    7418:	08 95       	ret

0000741a <_exit>:
    741a:	f8 94       	cli

0000741c <__stop_program>:
    741c:	ff cf       	rjmp	.-2      	; 0x741c <__stop_program>
